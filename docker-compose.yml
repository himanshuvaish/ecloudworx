version: '3.8'

services:
  ecloudworx-frontend:
    build: .
    container_name: ecloudworx-frontend
    ports:
      - "3000:80"
    restart: unless-stopped
    
  ecloudworx-dev:
    image: nginx:alpine
    container_name: ecloudworx-dev
    ports:
      - "3001:80"
    volumes:
      - ./index.html:/usr/share/nginx/html/index.html:ro
      - ./about.html:/usr/share/nginx/html/about.html:ro
      - ./contact.html:/usr/share/nginx/html/contact.html:ro
      - ./careers.html:/usr/share/nginx/html/careers.html:ro
      - ./help.html:/usr/share/nginx/html/help.html:ro
      - ./security.html:/usr/share/nginx/html/security.html:ro
      - ./status.html:/usr/share/nginx/html/status.html:ro
      - ./style.css:/usr/share/nginx/html/style.css:ro
      - ./app.js:/usr/share/nginx/html/app.js:ro
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro

    restart: unless-stopped
    profiles:
      - dev

# Future microservices will go here
# Example structure for when you add backend services:
#
#  ecloudworx-api:
#    build: ./backend
#    container_name: ecloudworx-api
#    ports:
#      - "8080:8080"
#    environment:
#      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
#      - AZURE_CLIENT_ID=${AZURE_CLIENT_ID}
#      - GCP_PROJECT_ID=${GCP_PROJECT_ID}
#    depends_on:
#      - ecloudworx-db
#    restart: unless-stopped
#
#  ecloudworx-automation:
#    build: ./automation-service
#    container_name: ecloudworx-automation
#    ports:
#      - "8081:8081"
#    depends_on:
#      - ecloudworx-api
#    restart: unless-stopped
#
#  ecloudworx-db:
#    image: postgres:15-alpine
#    container_name: ecloudworx-db
#    ports:
#      - "5432:5432"
#    environment:
#      POSTGRES_DB: ecloudworx
#      POSTGRES_USER: ecloudworx
#      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
#    volumes:
#      - postgres_data:/var/lib/postgresql/data
#    restart: unless-stopped

#volumes:
#  postgres_data:
